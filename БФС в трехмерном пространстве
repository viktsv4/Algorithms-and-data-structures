#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int bfs(int start_x,int start_y,int start_z,int end_x,int end_y,int end_z,vector<vector<vector<int>>> &done,vector<vector<vector<int>>> &dist) {
    queue <tuple<int ,int,int>>queue;
    done[start_x][start_y][start_z]=1;
    dist[start_x][start_y][start_z]=0;
    queue.push({start_x,start_y,start_z});
    while (!queue.empty()){
        auto[x,y,z]=queue.front();
        queue.pop();
        if (x == end_x && y == end_y&& z==end_z) {
            return dist[end_x][end_y][end_z];
        }
        if (x+1<=100 &&x+1>=0) {
            if(done[x + 1][y][z] == 0) {
                done[x + 1][y][z]= 1;
                dist[x + 1][y][z] = dist[x][y][z] + 1;
                queue.push({x + 1, y,z});
            }}
        if (x-1<=100 &&x-1>=0) {
            if(done[x -1][y][z] == 0) {
                done[x - 1][y][z]= 1;
                dist[x - 1][y][z] = dist[x][y][z] + 1;
                queue.push({x - 1, y,z});
            }}
        if (y+1<=100 &&y+1>=0) {
            if(done[x][y+1][z] == 0) {
                done[x ][y+1][z] = 1;
                dist[x ][y+1][z] = dist[x][y][z]+ 1;
                queue.push({x , y+1,z});
            }}
        if (y-1<=100 &&y-1>=0) {
            if(done[x][y-1][z] == 0) {
                done[x][y-1][z]= 1;
                dist[x][y-1][z] = dist[x][y][z] + 1;
                queue.push({x, y-1,z});
            }}
        if (z-1<=100 &&z-1>=0) {
            if(done[x][y][z-1] == 0) {
                done[x][y][z-1]= 1;
                dist[x][y][z-1] = dist[x][y][z] + 1;
                queue.push({x, y,z-1});
            }}
        if (z+1<=100 &&z+1>=0) {
            if(done[x][y][z+1] == 0) {
                done[x][y][z+1]= 1;
                dist[x][y][z+1] = dist[x][y][z] + 1;
                queue.push({x, y,z+1});
            }}
    }
    return -1;
}




int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<vector<int>>> done(101,vector<vector<int>>(101,vector<int>(101,0)));
    vector<vector<vector<int>>> dist(101,vector<vector<int>>(101,vector<int>(101,-1)));
    int first, second,third,first1,third1,second1;
    cin >> first >> second>>third>>first1>> second1>>third1;
    int start_x=first;
    int start_y=second;
    int start_z=third;
    int end_x=first1;
    int end_y=second1;
    int end_z=third1;
    if (start_x==end_x&& start_y==end_y&&start_z==end_z){
        cout<<"0";
    }
    else {
        for (int i = 0; i < n; i++) {
            int der_x, der_y, der_z,h;
            cin >> der_x >> der_y >> der_z>>h;
            for(int j=0;j<h;j++) done[der_x][der_y][der_z+j] = 1;
        }
        int k = bfs(start_x, start_y, start_z, end_x, end_y, end_z, done, dist);
        if (k <= m)cout << k << endl;
        else cout << "-1";
    }
    return 0;
}
