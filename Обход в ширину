#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<int> bfs(int start, vector<vector<int>> &gr, queue<int> &queue,vector<int> &dist,vector<int>&done ) {
    done[start]=1;
    dist[start]=0;
    queue.push(start);
    while (!queue.empty()){
        int now=queue.front();
        queue.pop();
        for(int i=0;i<gr[now].size();i++){
           if(done[gr[now][i]]==0) {
               done[gr[now][i]]=1;
           dist[gr[now][i]]=dist[now]+1;
           queue.push(gr[now][i]);
        }}
    }
    return dist;
   }

    int main() {
    int n, m,k;
    cin >> n >> m>>k;
    vector<vector<int>> gr(n);
    queue <int>queue;
    vector<int>done(n,0);
    vector<int> dist(n,-1);
    int flag=0;
    int start;
    for (int i = 0; i < m; i++) {
        int first, second;
        cin >> first >> second;
        if (flag==0){
            start=first;
            flag=1;
        }
        gr[first - 1].push_back(second - 1);
        gr[second - 1].push_back(first - 1);

    }
    bfs(start-1,gr,queue,dist,done);
    int flag2=0;
    for(int i=0;i<n;i++){
        if (dist[i]==k){
            cout<<i+1<<endl;
            flag2=1;
        }
    }
    if (flag2==0) cout<<"NO";
    return 0;
}
