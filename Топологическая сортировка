#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void dfs(int k,vector<vector<int>> &gr,vector<int> &done,vector<int>&status){
    done[k]=1;
    for(int i=0;i<gr[k].size();i++){
        if (done[gr[k][i]]==0){
            dfs(gr[k][i],gr,done,status);
        }
    }
    status.push_back(k);
}
int main() {
    int n,m;
    cin >> n>> m;
    vector<vector<int>> gr(n);
    vector <int> done(n,0);
    vector<int>status;
    for (int i=0;i<m;i++){
        int first,second;
        cin>>first>>second;
        gr[first-1].push_back(second-1);
    }
    for(int i=0;i<n;i++) {
        if(done[i]==0) dfs(i, gr, done,status);
    }
    reverse(status.begin(), status.end());
    for(int i=0;i<n;i++) {
        status[i]++;
    }

    vector<int>result(n);
    for(int i=0;i<n;i++){
        result[status[i]-1]=(i+1);
    }
    for(int i=0;i<n;i++) {
        cout<<result[i]<<" ";
    }
    return 0;
}
