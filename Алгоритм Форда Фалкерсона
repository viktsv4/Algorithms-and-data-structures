#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool dfs_check(int k, int j, vector<vector<pair< int, int>>> &gr,vector<int>&done) {
    if (k == j) {
        return true;
    }
    for (int i = 0; i < gr[k].size(); ++i) {
        auto [x, y] = gr[k][i];
        if ((y > 0 ) && done[x]==0) {
            done[x]=1;
            if (dfs_check(x, j, gr,done) == true) return true;
        }
    }
    return false;
}

int dfs(int start, int finish, int cmin, vector<int> &done, vector<vector<pair<int, int>>> &gr) {
    if (start == finish)
        return cmin;
    done[start] = true;
    for (int v = 0; v < gr[start].size(); v++) {
        if (gr[start][v].second>0){
        auto &[x, y] = gr[start][v];
        int obr_x;
        for(int i=0;i<gr[x].size();i++){
            if (gr[x][i].first==start) {
                obr_x=i;
                break;
            }
        }
        if (!done[x] && y > 0) {
            int delta = dfs(x, finish, min(cmin, abs(y )), done, gr);
            if (delta > 0) {
                y -= delta;
                gr[x][obr_x].second+=delta;
                return delta;
            }
        }}

    }

    return 0;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<int> done(n, 0);
    vector<int> done1(n, 0);
    vector<vector<pair< int, int>>> gr(n);

    for (int i = 0; i < m; i++) {
        int a, b, weight;
        cin >> a >> b >> weight;
        a--;
        b--;
        gr[a].push_back({b, weight});
        gr[b].push_back({a, 0});
    }

    int start = 0;
    int finish = n - 1;

    int max_sum = 0;
    while (dfs_check(start, finish, gr, done1) == true) {
        int cmin = 1000;
        max_sum += dfs(start, finish, cmin, done, gr);
        fill(done1.begin(), done1.end(), 0);
        fill(done.begin(), done.end(), 0);
    }
    cout << max_sum;
    return 0;
}
