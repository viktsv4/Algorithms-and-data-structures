#include <iostream>
#include <vector>


using namespace std;
void dfs(int k,vector<int>&parent, vector<vector<int>>&gr){
    for(int i=0;i<gr[k].size();i++){
        if (gr[k][i]!=parent[k]){
        parent[gr[k][i]]=k;
        dfs(gr[k][i],parent,gr);
    }}
}
int main() {
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(0);
    int n, m;
    cin >> n >> m;
    vector<vector<int>> gr(n);
    vector<int>parent(n);
    for (int i = 0; i < m; i++) {
        int first, second;
        cin >> first >> second ;
        gr[first-1].push_back(second-1);
        gr[second-1].push_back(first-1);
    }
    vector<int>degree(n);
    parent[n-1]=-1;
    dfs(n-1,parent,gr);
    int ptr=-1;
    for(int i=0;i<n;i++){
        degree[i]=gr[i].size();
        if (degree[i]==1 && ptr==-1)
            ptr=i;
    }
    //vector<int>result(n-2);
    int start=ptr;
    for(int i=0;i<n-2;i++){
        int next=parent[start];
        cout<<next+1<<" ";
        degree[next]--;
        if (degree[next]==1 && next<ptr)start=next;
        else{ ptr++;
            while(degree[ptr]!=1)ptr++;
                start=ptr;}
    }

    return 0;
}
